;; Object Projekt/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "Projekt/"
  :tables
  (list
    (semanticdb-table "Makefile"
      :major-mode 'makefile-gmake-mode
      :tags 
        '( ("default_target" function (:arguments ("all")) nil [163 183])
            (".PHONY" function (:arguments ("default_target")) nil [183 207])
            (".SUFFIXES" function nil nil [382 393])
            ("SUFFIXES" variable nil nil [457 468])
            (".SUFFIXES" function (:arguments (".hpux_make_needs_suffix_list")) nil [469 509])
            ("$(VERBOSE)" function nil nil [551 570])
            ("cmake_force" function nil nil [610 623])
            (".PHONY" function (:arguments ("cmake_force")) nil [623 644])
            ("SHELL" variable (:default-value ("/bin/sh")) nil [812 828])
            ("CMAKE_COMMAND" variable (:default-value ("/usr/bin/cmake")) nil [853 884])
            ("RM" variable (:default-value ("/usr/bin/cmake" "-E" "remove" "-f")) nil [917 950])
            ("EQUALS" variable (:default-value ("=")) nil [986 997])
            ("CMAKE_SOURCE_DIR" variable (:default-value ("/home/klapeyron/Pulpit/Projekt")) nil [1055 1105])
            ("CMAKE_BINARY_DIR" variable (:default-value ("/home/klapeyron/Pulpit/Projekt")) nil [1162 1212])
            ("edit_cache" function nil nil [1372 1523])
            (".PHONY" function (:arguments ("edit_cache")) nil [1523 1543])
            ("edit_cache/fast" function (:arguments ("edit_cache")) nil [1585 1613])
            (".PHONY" function (:arguments ("edit_cache/fast")) nil [1613 1638])
            ("rebuild_cache" function nil nil [1683 1868])
            (".PHONY" function (:arguments ("rebuild_cache")) nil [1868 1891])
            ("rebuild_cache/fast" function (:arguments ("rebuild_cache")) nil [1936 1970])
            (".PHONY" function (:arguments ("rebuild_cache/fast")) nil [1970 1998])
            ("all" function (:arguments ("cmake_check_build_system")) nil [2021 2315])
            (".PHONY" function (:arguments ("all")) nil [2315 2328])
            ("clean" function nil nil [2353 2399])
            (".PHONY" function (:arguments ("clean")) nil [2399 2414])
            ("clean/fast" function (:arguments ("clean")) nil [2439 2457])
            (".PHONY" function (:arguments ("clean/fast")) nil [2457 2477])
            ("preinstall" function (:arguments ("all")) nil [2514 2574])
            (".PHONY" function (:arguments ("preinstall")) nil [2574 2594])
            ("preinstall/fast" function nil nil [2631 2692])
            (".PHONY" function (:arguments ("preinstall/fast")) nil [2692 2717])
            ("depend" function nil nil [2734 2853])
            (".PHONY" function (:arguments ("depend")) nil [2853 2869])
            ("asystent" function (:arguments ("cmake_check_build_system")) nil [3017 3094])
            (".PHONY" function (:arguments ("asystent")) nil [3094 3112])
            ("asystent/fast" function nil nil [3143 3235])
            (".PHONY" function (:arguments ("asystent/fast")) nil [3235 3258])
            ("src/Card.o" function (:arguments ("src/Card.cpp.o")) nil [3259 3286])
            (".PHONY" function (:arguments ("src/Card.o")) nil [3286 3306])
            ("src/Card.cpp.o" function nil nil [3340 3442])
            (".PHONY" function (:arguments ("src/Card.cpp.o")) nil [3442 3466])
            ("src/Card.i" function (:arguments ("src/Card.cpp.i")) nil [3467 3494])
            (".PHONY" function (:arguments ("src/Card.i")) nil [3494 3514])
            ("src/Card.cpp.i" function nil nil [3552 3654])
            (".PHONY" function (:arguments ("src/Card.cpp.i")) nil [3654 3678])
            ("src/Card.s" function (:arguments ("src/Card.cpp.s")) nil [3679 3706])
            (".PHONY" function (:arguments ("src/Card.s")) nil [3706 3726])
            ("src/Card.cpp.s" function nil nil [3768 3870])
            (".PHONY" function (:arguments ("src/Card.cpp.s")) nil [3870 3894])
            ("src/Table.o" function (:arguments ("src/Table.cpp.o")) nil [3895 3924])
            (".PHONY" function (:arguments ("src/Table.o")) nil [3924 3945])
            ("src/Table.cpp.o" function nil nil [3979 4083])
            (".PHONY" function (:arguments ("src/Table.cpp.o")) nil [4083 4108])
            ("src/Table.i" function (:arguments ("src/Table.cpp.i")) nil [4109 4138])
            (".PHONY" function (:arguments ("src/Table.i")) nil [4138 4159])
            ("src/Table.cpp.i" function nil nil [4197 4301])
            (".PHONY" function (:arguments ("src/Table.cpp.i")) nil [4301 4326])
            ("src/Table.s" function (:arguments ("src/Table.cpp.s")) nil [4327 4356])
            (".PHONY" function (:arguments ("src/Table.s")) nil [4356 4377])
            ("src/Table.cpp.s" function nil nil [4419 4523])
            (".PHONY" function (:arguments ("src/Table.cpp.s")) nil [4523 4548])
            ("src/detectionSystem.o" function (:arguments ("src/detectionSystem.cpp.o")) nil [4549 4598])
            (".PHONY" function (:arguments ("src/detectionSystem.o")) nil [4598 4629])
            ("src/detectionSystem.cpp.o" function nil nil [4663 4787])
            (".PHONY" function (:arguments ("src/detectionSystem.cpp.o")) nil [4787 4822])
            ("src/detectionSystem.i" function (:arguments ("src/detectionSystem.cpp.i")) nil [4823 4872])
            (".PHONY" function (:arguments ("src/detectionSystem.i")) nil [4872 4903])
            ("src/detectionSystem.cpp.i" function nil nil [4941 5065])
            (".PHONY" function (:arguments ("src/detectionSystem.cpp.i")) nil [5065 5100])
            ("src/detectionSystem.s" function (:arguments ("src/detectionSystem.cpp.s")) nil [5101 5150])
            (".PHONY" function (:arguments ("src/detectionSystem.s")) nil [5150 5181])
            ("src/detectionSystem.cpp.s" function nil nil [5223 5347])
            (".PHONY" function (:arguments ("src/detectionSystem.cpp.s")) nil [5347 5382])
            ("src/enemyCards.o" function (:arguments ("src/enemyCards.cpp.o")) nil [5383 5422])
            (".PHONY" function (:arguments ("src/enemyCards.o")) nil [5422 5448])
            ("src/enemyCards.cpp.o" function nil nil [5482 5596])
            (".PHONY" function (:arguments ("src/enemyCards.cpp.o")) nil [5596 5626])
            ("src/enemyCards.i" function (:arguments ("src/enemyCards.cpp.i")) nil [5627 5666])
            (".PHONY" function (:arguments ("src/enemyCards.i")) nil [5666 5692])
            ("src/enemyCards.cpp.i" function nil nil [5730 5844])
            (".PHONY" function (:arguments ("src/enemyCards.cpp.i")) nil [5844 5874])
            ("src/enemyCards.s" function (:arguments ("src/enemyCards.cpp.s")) nil [5875 5914])
            (".PHONY" function (:arguments ("src/enemyCards.s")) nil [5914 5940])
            ("src/enemyCards.cpp.s" function nil nil [5982 6096])
            (".PHONY" function (:arguments ("src/enemyCards.cpp.s")) nil [6096 6126])
            ("src/main.o" function (:arguments ("src/main.cpp.o")) nil [6127 6154])
            (".PHONY" function (:arguments ("src/main.o")) nil [6154 6174])
            ("src/main.cpp.o" function nil nil [6208 6310])
            (".PHONY" function (:arguments ("src/main.cpp.o")) nil [6310 6334])
            ("src/main.i" function (:arguments ("src/main.cpp.i")) nil [6335 6362])
            (".PHONY" function (:arguments ("src/main.i")) nil [6362 6382])
            ("src/main.cpp.i" function nil nil [6420 6522])
            (".PHONY" function (:arguments ("src/main.cpp.i")) nil [6522 6546])
            ("src/main.s" function (:arguments ("src/main.cpp.s")) nil [6547 6574])
            (".PHONY" function (:arguments ("src/main.s")) nil [6574 6594])
            ("src/main.cpp.s" function nil nil [6636 6738])
            (".PHONY" function (:arguments ("src/main.cpp.s")) nil [6738 6762])
            ("src/myCards.o" function (:arguments ("src/myCards.cpp.o")) nil [6763 6796])
            (".PHONY" function (:arguments ("src/myCards.o")) nil [6796 6819])
            ("src/myCards.cpp.o" function nil nil [6853 6961])
            (".PHONY" function (:arguments ("src/myCards.cpp.o")) nil [6961 6988])
            ("src/myCards.i" function (:arguments ("src/myCards.cpp.i")) nil [6989 7022])
            (".PHONY" function (:arguments ("src/myCards.i")) nil [7022 7045])
            ("src/myCards.cpp.i" function nil nil [7083 7191])
            (".PHONY" function (:arguments ("src/myCards.cpp.i")) nil [7191 7218])
            ("src/myCards.s" function (:arguments ("src/myCards.cpp.s")) nil [7219 7252])
            (".PHONY" function (:arguments ("src/myCards.s")) nil [7252 7275])
            ("src/myCards.cpp.s" function nil nil [7317 7425])
            (".PHONY" function (:arguments ("src/myCards.cpp.s")) nil [7425 7452])
            ("src/stackCards.o" function (:arguments ("src/stackCards.cpp.o")) nil [7453 7492])
            (".PHONY" function (:arguments ("src/stackCards.o")) nil [7492 7518])
            ("src/stackCards.cpp.o" function nil nil [7552 7666])
            (".PHONY" function (:arguments ("src/stackCards.cpp.o")) nil [7666 7696])
            ("src/stackCards.i" function (:arguments ("src/stackCards.cpp.i")) nil [7697 7736])
            (".PHONY" function (:arguments ("src/stackCards.i")) nil [7736 7762])
            ("src/stackCards.cpp.i" function nil nil [7800 7914])
            (".PHONY" function (:arguments ("src/stackCards.cpp.i")) nil [7914 7944])
            ("src/stackCards.s" function (:arguments ("src/stackCards.cpp.s")) nil [7945 7984])
            (".PHONY" function (:arguments ("src/stackCards.s")) nil [7984 8010])
            ("src/stackCards.cpp.s" function nil nil [8052 8166])
            (".PHONY" function (:arguments ("src/stackCards.cpp.s")) nil [8166 8196])
            ("help" function nil nil [8211 9042])
            (".PHONY" function (:arguments ("help")) nil [9042 9056])
            ("cmake_check_build_system" function nil nil [9363 9500])
            (".PHONY" function (:arguments ("cmake_check_build_system")) nil [9500 9534]))          
      :file "Makefile"
      :pointmax 9535
      :fsize 9534
      :lastmodtime '(21799 57318 540212 476000)
      :unmatched-syntax nil))
  :file "!home!klapeyron!Pulpit!Projekt!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
